package rs.ac.uns.ftn.sbnz.rules

import rs.ac.uns.ftn.sbnz.models.drools.PropertyWithScore;
import rs.ac.uns.ftn.sbnz.models.drools.ScoredProperties;
import rs.ac.uns.ftn.sbnz.models.*;
import rs.ac.uns.ftn.sbnz.models.Property;
import rs.ac.uns.ftn.sbnz.models.PlaceOfInterest;
import rs.ac.uns.ftn.sbnz.models.drools.SmartSearch;
import rs.ac.uns.ftn.sbnz.models.drools.PropertyInformation;
import rs.ac.uns.ftn.sbnz.models.drools.PersonalInformation;
import rs.ac.uns.ftn.sbnz.models.enums.Interest;
import rs.ac.uns.ftn.sbnz.models.enums.Heating;
import rs.ac.uns.ftn.sbnz.models.enums.PetStatus;
import rs.ac.uns.ftn.sbnz.models.enums.Amenity;
import rs.ac.uns.ftn.sbnz.models.enums.TypeOfPlace;

import java.util.List;


rule "Filter properties" salience 3
    when
        $ss: SmartSearch();
        $sp: ScoredProperties();
        $p: Property(
            $id: id,
            price >= $ss.propertyInformation.priceLow, price <= $ss.propertyInformation.priceHigh,
            size >= $ss.propertyInformation.sizeLow, size <= $ss.propertyInformation.sizeHigh,
            numberOfBeds >= $ss.propertyInformation.bedsLow, numberOfBeds <= $ss.propertyInformation.bedsHigh,
            numberOfBathrooms >= $ss.propertyInformation.bathroomsLow, numberOfBathrooms <= $ss.propertyInformation.bathroomsHigh,
            heating memberOf $ss.propertyInformation.heating,
            allowedPets.containsAll($ss.propertyInformation.pets),
            amenities.containsAll($ss.propertyInformation.amenities)
        );
    then

        System.out.println(String.format("Filtered property %s", $id));
        insert(new PropertyWithScore($p));
end