package rs.ac.uns.ftn.sbnz.rules

import rs.ac.uns.ftn.sbnz.models.drools.PropertyWithScore;
import rs.ac.uns.ftn.sbnz.models.drools.ScoredProperties;
import rs.ac.uns.ftn.sbnz.models.*;
import rs.ac.uns.ftn.sbnz.models.Property;
import rs.ac.uns.ftn.sbnz.models.PlaceOfInterest;
import rs.ac.uns.ftn.sbnz.web.dto.v1.SmartSearchDTO;
import rs.ac.uns.ftn.sbnz.web.dto.v1.PropertyInformationDTO;
import rs.ac.uns.ftn.sbnz.web.dto.v1.PersonalInformationDTO;
import rs.ac.uns.ftn.sbnz.models.enums.Interest;
import rs.ac.uns.ftn.sbnz.models.enums.Heating;
import rs.ac.uns.ftn.sbnz.models.enums.PetStatus;
import rs.ac.uns.ftn.sbnz.models.enums.Amenity;
import rs.ac.uns.ftn.sbnz.models.enums.TypeOfPlace;

import java.util.List;

rule "Calculate pet score" salience 1
    when
        $ps: PropertyWithScore(scaler.getFiredRules() not contains "Calculate pet score");
        $sp: ScoredProperties();
    then
        System.out.println(String.format("Calculating pet score for %s", $ps.getProperty().getId()));
        double score = 0.0;

        if ($ps.getProperty().getAllowedPets().contains(PetStatus.CATS))
            score += 1.5 * $ps.getScaler().getPetScale();
        if ($ps.getProperty().getAllowedPets().contains(PetStatus.DOGS))
            score += 1.5 * $ps.getScaler().getPetScale();
        if ($ps.getProperty().getAllowedPets().contains(PetStatus.IN_AQUARIUM))
            score += 0.5 * $ps.getScaler().getPetScale();
        if ($ps.getProperty().getAllowedPets().contains(PetStatus.IN_TERRARIUM))
            score += 0.5 * $ps.getScaler().getPetScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add("Calculate pet score");
        update($ps);
end