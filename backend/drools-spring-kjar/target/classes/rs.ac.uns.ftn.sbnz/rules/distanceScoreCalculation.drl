package rs.ac.uns.ftn.sbnz.rules

import rs.ac.uns.ftn.sbnz.models.drools.PropertyWithScore;
import rs.ac.uns.ftn.sbnz.models.drools.ScoredProperties;
import rs.ac.uns.ftn.sbnz.models.*;
import rs.ac.uns.ftn.sbnz.models.Property;
import rs.ac.uns.ftn.sbnz.models.PlaceOfInterest;
import rs.ac.uns.ftn.sbnz.models.drools.SmartSearch;
import rs.ac.uns.ftn.sbnz.models.drools.PropertyInformation;
import rs.ac.uns.ftn.sbnz.models.drools.PersonalInformation;
import rs.ac.uns.ftn.sbnz.models.enums.Interest;
import rs.ac.uns.ftn.sbnz.models.enums.Heating;
import rs.ac.uns.ftn.sbnz.models.enums.PetStatus;
import rs.ac.uns.ftn.sbnz.models.enums.Amenity;
import rs.ac.uns.ftn.sbnz.models.enums.TypeOfPlace;

import java.util.List;


rule "Calculate kindergarten distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.KINDERGARTEN))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate kindergarten distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating kindergarten %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getKindergartenScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getKindergartenScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate kindergarten distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate school distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SCHOOL))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate school distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating school %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getSchoolScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getSchoolScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate school distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate university distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.UNIVERSITY))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate university distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating university %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getUniversityScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getUniversityScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate university distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate hospital distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.HOSPITAL))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate hospital distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating hospital %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getHospitalScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getHospitalScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate hospital distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate bank distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.BANK))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate bank distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating bank %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getBankScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getBankScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate bank distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate park distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.PARK))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate park distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating park %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getParkScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getParkScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate park distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate gym distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.GYM))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate gym distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating gym %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getGymScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getGymScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate gym distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate restaurant distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.RESTAURANT))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate restaurant distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating restaurant %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getRestaurantScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getRestaurantScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate restaurant distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate theater distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.THEATER))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate theater distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating theater %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getTheaterScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getTheaterScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate theater distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate cinema distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.CINEMA))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate cinema distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating cinema %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getCinemaScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getCinemaScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate cinema distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate supermarket distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SUPERMARKET))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate supermarket distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating supermarket %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getSupermarketScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getSupermarketScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate supermarket distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate shopping center distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SHOPPING_CENTER))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate shopping center distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating shopping center %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getShoppingCenterScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getShoppingCenterScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate shopping center distance score %s", $poi.getId()));
        update($ps);
end

rule "Calculate night club distance score" salience 1
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.NIGHT_CLUB))
        $ps: PropertyWithScore(scaler.getFiredRules() not contains String.format("Calculate night club distance score %s", $poi.getId()));
    then
        System.out.println(String.format("Calculating night club %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 0.0;
        double distance = $poi.calculateDistance($ps.getProperty());

        if (distance < $ps.getScaler().getNearbyDistanceFactor())
            score += 1 * $ps.getScaler().getNightClubScale();
        else
            score += $ps.getScaler().getNearbyDistanceFactor() / distance * $ps.getScaler().getNightClubScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate night club distance score %s", $poi.getId()));
        update($ps);
end