package rs.ac.uns.ftn.sbnz.rules

import rs.ac.uns.ftn.sbnz.models.drools.PropertyWithScore;
import rs.ac.uns.ftn.sbnz.models.drools.ScoredProperties;
import rs.ac.uns.ftn.sbnz.models.*;
import rs.ac.uns.ftn.sbnz.models.Property;
import rs.ac.uns.ftn.sbnz.models.PlaceOfInterest;
import rs.ac.uns.ftn.sbnz.models.drools.SmartSearch;
import rs.ac.uns.ftn.sbnz.models.drools.PropertyInformation;
import rs.ac.uns.ftn.sbnz.models.drools.PersonalInformation;
import rs.ac.uns.ftn.sbnz.models.enums.Interest;
import rs.ac.uns.ftn.sbnz.models.enums.Heating;
import rs.ac.uns.ftn.sbnz.models.enums.PetStatus;
import rs.ac.uns.ftn.sbnz.models.enums.Amenity;
import rs.ac.uns.ftn.sbnz.models.enums.TypeOfPlace;

import java.util.List;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// KINDERGARTEN DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate kindergarten distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.KINDERGARTEN))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate kindergarten distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating kindergarten %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getKindergartenScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate kindergarten distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate kindergarten distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.KINDERGARTEN))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate kindergarten distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating kindergarten %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getKindergartenScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate kindergarten distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SCHOOL DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate school distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SCHOOL))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate school distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating school %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getSchoolScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate school distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate school distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SCHOOL))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate school distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating school %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getSchoolScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate school distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UNIVERSITY DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate university distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.UNIVERSITY))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate university distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating university %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getUniversityScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate university distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate university distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.UNIVERSITY))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate university distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating university %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getUniversityScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate university distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HOSPITAL DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate hospital distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.HOSPITAL))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate hospital distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating hospital %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getHospitalScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate hospital distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate hospital distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.HOSPITAL))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate hospital distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating hospital %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getHospitalScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate hospital distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BANK DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate bank distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.BANK))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate bank distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating bank %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getBankScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate bank distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate bank distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.BANK))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate bank distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating bank %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getBankScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate bank distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PARK DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate park distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.PARK))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate park distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating park %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getParkScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate park distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate park distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.PARK))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate park distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating park %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getParkScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate park distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GYM DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate gym distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.GYM))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate gym distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating gym %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getGymScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate gym distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate gym distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.GYM))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate gym distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating gym %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getGymScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate gym distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RESTAURANT DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate restaurant distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.RESTAURANT))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate restaurant distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating restaurant %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getRestaurantScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate restaurant distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate restaurant distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.RESTAURANT))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate restaurant distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating restaurant %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getRestaurantScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate restaurant distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// THEATER DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate theater distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.THEATER))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate theater distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating theater %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getTheaterScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate theater distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate theater distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.THEATER))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate theater distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating theater %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getTheaterScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate theater distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CINEMA DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate cinema distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.CINEMA))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate cinema distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating cinema %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getCinemaScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate cinema distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate cinema distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.CINEMA))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate cinema distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating cinema %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getCinemaScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate cinema distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SUPERMARKET DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate supermarket distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SUPERMARKET))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate supermarket distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating supermarket %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getSupermarketScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate supermarket distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate supermarket distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SUPERMARKET))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate supermarket distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating supermarket %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getSupermarketScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate supermarket distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SHOPPING CENTER DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate shopping center distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SHOPPING_CENTER))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate shopping center distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating shopping center %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getShoppingCenterScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate shopping center distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate shopping center distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.SHOPPING_CENTER))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate shopping center distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating shopping center %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getShoppingCenterScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate shopping center distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NIGHT CLUB DISTANCE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate night club distance score - LOWER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.NIGHT_CLUB))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate night club distance score %s - LOWER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) < $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating night club %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = 1 * $ps.getScaler().getNightClubScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate night club distance score %s - LOWER", $poi.getId()));
        update($ps);
end

rule "Calculate night club distance score - HIGHER" salience 1
    agenda-group "distance_score_calculation"
    when
        $poi: PlaceOfInterest(typeOfPlace.equals(TypeOfPlace.NIGHT_CLUB))
        $ps: PropertyWithScore(
            scaler.getFiredRules() not contains String.format("Calculate night club distance score %s - HIGHER", $poi.getId())
        )
        eval($poi.calculateDistance($ps.getProperty()) >= $ps.getScaler().getNearbyDistanceFactor())
    then
        System.out.println(String.format("Calculating night club %s distance score for: %s", $poi.getId(), $ps.getProperty().getId()));
        double score = $ps.getScaler().getNearbyDistanceFactor() / $poi.calculateDistance($ps.getProperty()) * $ps.getScaler().getNightClubScale();

        $ps.setScore($ps.getScore() + score);
        System.out.println(String.format("Score for %s is %s \n", $ps.getProperty().getId(), $ps.getScore()));
        $ps.getScaler().getFiredRules().add(String.format("Calculate night club distance score %s - HIGHER", $poi.getId()));
        update($ps);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END RULE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Calculate distance score - END" salience -1
    enabled false
    agenda-group "distance_score_calculation"
    when
    then
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("heating_score_calculation").setFocus();
end